x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects --------------------------------
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
log_lok_result <- blvmeval::log_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5)
blvmeval::calc_IC(log_lok_result, 1)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
View(samps2_thin)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
blvmeval::get_quadrature
# ?blvmeval::get_quadrature
# blvmeval::get_quadrature(5,2)
blvmeval::log_lik
blvmeval::calc_IC
blvmeval::log_marg_lik
# Input function 1: loglik_i
loglik_i <- function(samples_s, data, i, lv_mu, lv_cov, Ngrid) {
# standard quadrature points
raneff_mu <- lv_mu[[i]]
raneff_cov <- lv_cov[[i]]
raneff_Q <- t(chol(raneff_cov)) # lower triangular
Ndim <- length(raneff_mu)
nodes_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$nodes
log_weights_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$log_weights
nodes_org <- t(apply(nodes_Ndim, 1, function(z) raneff_mu + raneff_Q %*% z))
# conditional likelihood
Nobs <- data$Nobs
Nnum <- data$Nnum
Tnum <- Nobs/Nnum
y_i <- data$y[((i-1)*Tnum+1):(i*Tnum)]
x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
data_list$N <- data_list$Nnum
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5, log_prior = log_prior,
lb = lb, ub = ub, ...)
blvmeval::log_marg_lik(samples = samps2_thin, data = data,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5, log_prior = log_prior,
lb = lb, ub = ub)
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5, log_prior = log_prior,
lb = lb, ub = ub)
View(raneff_mu_list)
# Input function 1: loglik_i
loglik_i <- function(samples_s, data, i, lv_mu, lv_cov, Ngrid) {
# standard quadrature points
raneff_mu <- lv_mu[[i]]
raneff_cov <- lv_cov[[i]]
raneff_Q <- t(chol(raneff_cov)) # lower triangular
Ndim <- length(raneff_mu)
nodes_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$nodes
log_weights_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$log_weights
nodes_org <- t(apply(nodes_Ndim, 1, function(z) raneff_mu + raneff_Q %*% z))
# conditional likelihood
Nobs <- data$Nobs
Nnum <- data$Nnum
Tnum <- Nobs/Nnum
y_i <- data$y[((i-1)*Tnum+1):(i*Tnum)]
x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
data_list$N <- data_list$Nnum
blvmeval::calc_IC(log_lok_result, 1)
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5, log_prior = log_prior,
lb = lb, ub = ub)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
blvmeval::log_marg_lik
# Input function 1: loglik_i
loglik_i <- function(samples_s, data, i, lv_mu, lv_cov, Ngrid) {
# standard quadrature points
raneff_mu <- lv_mu[[i]]
raneff_cov <- lv_cov[[i]]
raneff_Q <- t(chol(raneff_cov)) # lower triangular
Ndim <- length(raneff_mu)
nodes_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$nodes
log_weights_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$log_weights
nodes_org <- t(apply(nodes_Ndim, 1, function(z) raneff_mu + raneff_Q %*% z))
# conditional likelihood
Nobs <- data$Nobs
Nnum <- data$Nnum
Tnum <- Nobs/Nnum
y_i <- data$y[((i-1)*Tnum+1):(i*Tnum)]
x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
data_list$N <- data_list$Nnum
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5, log_prior = log_prior,
lb = lb, ub = ub)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
blvmeval::log_marg_lik
# Input function 1: loglik_i
loglik_i <- function(samples_s, data, i, lv_mu, lv_cov, Ngrid) {
# standard quadrature points
raneff_mu <- lv_mu[[i]]
raneff_cov <- lv_cov[[i]]
raneff_Q <- t(chol(raneff_cov)) # lower triangular
Ndim <- length(raneff_mu)
nodes_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$nodes
log_weights_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$log_weights
nodes_org <- t(apply(nodes_Ndim, 1, function(z) raneff_mu + raneff_Q %*% z))
# conditional likelihood
Nobs <- data$Nobs
Nnum <- data$Nnum
Tnum <- Nobs/Nnum
y_i <- data$y[((i-1)*Tnum+1):(i*Tnum)]
x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
data_list$N <- data_list$Nnum
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5,
log_prior = log_prior, lb = lb, ub = ub)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
blvmeval::log_marg_lik
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5,
log_prior = log_prior, lb = lb, ub = ub)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
blvmeval::log_marg_lik
# Input function 1: loglik_i
loglik_i <- function(samples_s, data, i, lv_mu, lv_cov, Ngrid) {
# standard quadrature points
raneff_mu <- lv_mu[[i]]
raneff_cov <- lv_cov[[i]]
raneff_Q <- t(chol(raneff_cov)) # lower triangular
Ndim <- length(raneff_mu)
nodes_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$nodes
log_weights_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$log_weights
nodes_org <- t(apply(nodes_Ndim, 1, function(z) raneff_mu + raneff_Q %*% z))
# conditional likelihood
Nobs <- data$Nobs
Nnum <- data$Nnum
Tnum <- Nobs/Nnum
y_i <- data$y[((i-1)*Tnum+1):(i*Tnum)]
x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5,
log_prior = log_prior, lb = lb, ub = ub)
unloadNamespace("blvmeval")
remove.packages("blvmeval", lib = "D:/Software/R/R-4.2.2/library")
install.packages("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/blvmeval/blvmeval_0.0.0.9000.tar.gz",
repos = NULL, lib = "D:/Software/R/R-4.2.2/library")
blvmeval::log_marg_lik
# Input function 2 log_prior
log_prior <- function(samples) {
dgamma(samples[["y_pre"]], shape = 0.001, rate = 0.001, log = TRUE) +
dnorm(samples[["gamma_mu"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dnorm(samples[["gamma_phi"]], mean = 0, sd = sqrt(1/0.01), log = TRUE) +
dgamma(samples[["tau_mu"]], shape = 0.001, rate = 0.001, log = TRUE) +
dgamma(samples[["tau_phi"]], shape = 0.001, rate = 0.001, log = TRUE) +
dunif(samples[["rho"]], min = -1, max = 1, log = TRUE)
}
all_vector <- c("gamma_mu", "gamma_phi", "y_pre", "tau_mu", "tau_phi", "rho")
# samps2 <- as.matrix(samps[ ,all_vector])
# samps2_thin <- samps2[seq(1, nrow(samps2), by = 10), ] # (4*25000/10)/10 = 1000
lb <- c(rep(-Inf, 2), rep(0, 3), -1)
ub <- c(rep(Inf, 2), rep(Inf, 3), 1)
names(lb) <- all_vector
names(ub) <- all_vector
blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 5,
log_prior = log_prior, lb = lb, ub = ub)
bridge_result_AQ
bridge_result_AS
log_lik_result <- log_lok_result
log_marg_lik_result <- blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 9,
log_prior = log_prior, lb = lb, ub = ub)
log_marg_lik_result
log_marg_lik_result <- blvmeval::log_marg_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 15,
log_prior = log_prior, lb = lb, ub = ub)
log_marg_lik_result
# Input function 1: loglik_i
loglik_i <- function(samples_s, data, i, lv_mu, lv_cov, Ngrid) {
# standard quadrature points
raneff_mu <- lv_mu[[i]]
raneff_cov <- lv_cov[[i]]
raneff_Q <- t(chol(raneff_cov)) # lower triangular
Ndim <- length(raneff_mu)
nodes_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$nodes
log_weights_Ndim <- blvmeval::get_quadrature(Ngrid = Ngrid, Ndim = Ndim)$log_weights
nodes_org <- t(apply(nodes_Ndim, 1, function(z) raneff_mu + raneff_Q %*% z))
# conditional likelihood
Nobs <- data$Nobs
Nnum <- data$Nnum
Tnum <- Nobs/Nnum
y_i <- data$y[((i-1)*Tnum+1):(i*Tnum)]
x_i <- data$x[((i-1)*Tnum+1):(i*Tnum)]
predicted_y <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_t_i <- matrix(NA, nrow = Ngrid*Ngrid, ncol = Tnum)
log_con_i <- numeric(Ngrid*Ngrid) # log likelihood for all t for person i, for each q
x_i_extended <- rep(x_i, times = Ngrid * Ngrid)
x_i_extended_mat <- matrix(x_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
y_i_extended <- rep(y_i, times = Ngrid * Ngrid)
y_i_extended_mat <- matrix(y_i_extended, nrow = Ngrid * Ngrid, ncol = Tnum, byrow = TRUE)
predicted_y <- nodes_org[, 1] + nodes_org[, 2] * x_i_extended_mat
log_con_t_i <- dnorm(y_i_extended_mat, mean = predicted_y, sd = 1/sqrt(samples_s[["y_pre"]]), log = TRUE)
log_con_i <- rowSums(log_con_t_i)
# random effects
raneff_i <- numeric(Ngrid*Ngrid)
sd_mu <- sqrt(1/samples_s[["tau_mu"]])
sd_phi <- sqrt(1/samples_s[["tau_phi"]])
mean <- c(samples_s[["gamma_mu"]], samples_s[["gamma_phi"]])
sigma <- matrix(c(sd_mu^2, sd_mu*samples_s[["rho"]]*sd_phi,
sd_mu*samples_s[["rho"]]*sd_phi, sd_phi^2), nrow = 2)
log_raneff_i <- mvtnorm::dmvnorm(nodes_org, mean = mean, sigma = sigma, log = TRUE)
log_std_i <- log( mvtnorm::dmvnorm(nodes_Ndim, mean = c(0,0), sigma = matrix(c(1,0,0,1),nrow=2) )/det(raneff_Q) )
matrixStats::logSumExp(log_weights_Ndim + log_raneff_i - log_std_i  + log_con_i)
}
data_list$N <- data_list$Nnum
log_lik_result <- blvmeval::log_lik(samples = samps2_thin, data = data_list,
lv_mu = raneff_mu_list, lv_cov = raneff_cov_list,
log_lik_i = loglik_i, Ngrid = 15)
blvmeval::calc_IC(log_lok_result, 1)
View(samps2_thin)
?blvmeval::log_marg_lik
blvmeval::log_marg_lik
?log_marg_lik
library(blvmeval)
?log_marg_lik
det(4)
?dnorm
?dmvnorm
?ddirichlet
?extraDistr::ddirichlet
devtools::document()
devtools::document()
use_mit_license()
usethis::use_mit_license()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
gauss.quad.prob(15, "normal", mu = 0, sigma = 1)
gauss.quad.prob(15, "normal", mu = 0, sigma = 1)
DIAG(2)
diag(2)
devtools::document()
devtools::build()
devtools::build()
system("git status")
system("git log")
devtools::document()
devtools::build()
example1 <- read.csv("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/0314example1_LMSEM.csv")
example1 <- read.csv("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/example1_LMSEM.csv")
example1 <- read.csv("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/0314/example1_LMSEM.csv")
save(example1, file = "data/example1_LMSEM.rda")
example1_LMSEM <- read.csv("D:/2_PhD/C_project/P15_marginal likelihood_tutorial/0314/example1_LMSEM.csv")
save(example1_LMSEM, file = "data/example1_LMSEM.rda")
devtools::document()
devtools::build()
git log
devtools::document()
devtools::build()
devtools::build()
a <- c(1,2,3)
?expand.grid
expand.grid(a,a)
